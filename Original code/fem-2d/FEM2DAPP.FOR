C                         PROGRAM FEM2DAPP.FOR
C
C                THIS PROGRAM SOLVES THE 2-D EQUATIONS FOR
C                STRESS/STRAIN OR INCOMPRESSIBLE FLOW (W/O
C                ADVECTION TERMS) USING A PENALTY PARAMETER
C
C                ADAPTED BY DARRELL W. PEPPER FOR THE AIAA
C                           HOME STUDY COURSE
C
C                (THIS PROGRAM IS BASED ON AN FEM METHOD ORIGINALLY
C                 DESCRIBED BY J.N.REDDY, AN INTRODUCTION TO THE
C                 FINITE ELEMENT METHOD, McGRAW-HILL PUB. CO.,
C                 NEW YORK, 1984, 495 PP.)
C
C  NOTE: SINCE THIS PROGRAM USES A PENALTY TECHNIQUE, DOUBLE PRECISION
C        IS REQUIRED. MAXIMUM NUMBER OF NODES = 501
C
C        A SIMPLE MESH GENERATOR FOR RECTANGULAR REGIONS IS INCLUDED
C        AS A SUBROUTINE (GRID)
C
C **********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION A(501,30),BF(501),BP(501),W(2,9),TITLE(18),
     *          IBDF(100),VBDF(100),IDIR(50),VDIR(50),ICV(20),INOD(20,2)
      COMMON/MSH/NODE(501,9),X(501),Y(501),DX(15),DY(15)
      COMMON/STF/ASTIF(18,18),ELXY(9,2),C(3,3),F(18),W0(18),A0,A1
      DATA NRMAX/501/,NCMAX/30/
C
      CALL INFILE
      CALL PLTOUT
C
C     START OF DATA INPUT
C
      READ(5,400)TITLE
      READ(5,*)IELEM,NUMN,ITYPE,ICONV,IGRID,ITEM,NPRNT
      IF(ITYPE.EQ.2.AND.IELEM.EQ.0)STOP
      IF(ITYPE.GE.0)PRINT 550
      IF(ITYPE.LT.0)PRINT 570
      PRINT 400,TITLE
      IF(IGRID.EQ.1)GOTO 30
C
      READ(5,*)NELEM,NODES
      DO 20 N=1,NELEM
   20 READ(5,*) (NODE(N,I),I=1,NUMN)
      DO 21 I=1,NODES
   21 READ(5,*) J,X(J),Y(J)
      GOTO 40
C
   30 READ(5,*)NX,NY
      NXX1=IELEM*NX+1
      NYY1=IELEM*NY+1
       IF(IELEM.EQ.0)THEN
        NXX1=NX+1
        NYY1=NY+1
       ENDIF
      READ(5,*) (DX(I),I=1,NXX1)
      READ(5,*) (DY(I),I=1,NYY1)
      CALL GRID(IELEM,NX,NY,NUMN,NODES,NELEM)
C
   40 READ(5,*)C1,C2,C3,C4,C5
      IF(ITYPE.GE.0.OR.ICONV.EQ.0)GOTO 50
C
      READ(5,*)NCONV
      DO 45 I=1,NCONV
   45 READ(5,*)ICV(I),INOD(I,1),INOD(I,2)
C
   50 READ(5,*)NSDF
      IF(NSDF.EQ.0)GOTO 60
C
      DO 51 I=1,NSDF
   51 READ(5,*)IBDF(I),VBDF(I)
C
   60 READ(5,*)NDIRC
      IF(NDIRC.EQ.0)GOTO 70
C
      DO 61 I=1,NDIRC
   61 READ(5,*)IDIR(I),VDIR(I)
C
   70 IF(ITEM.EQ.1)THEN
      READ(5,*)DT,THETA,TO
      DO 73 I=1,NEQ
   73 READ(5,*)BP(I)
      ENDIF
C
C     END OF DATA INPUT
C
      IF(ITYPE.LT.0)NDF=1
      IF(ITYPE.GE.0)NDF=2
      NEQ=NODES*NDF
      NDOF=NUMN*NDF
      PRINT 660, IELEM,ITYPE,ICONV
      IF(ITYPE.EQ.2)C2=C2*1.0D8
      IF(ITYPE.EQ.2)PRINT 650,C1,C2
      IF(ITYPE.EQ.0.OR.ITYPE.EQ.1)PRINT 530,C1,C2,C3,C4,C5
      IF(ITYPE.LT.0)PRINT 510,C1,C2,C3,C4,C5
      PRINT 450, NELEM,NODES,NEQ
      IF(ICONV.EQ.1)PRINT 470, NCONV,(ICV(I),I=1,NCONV)
      PRINT 560
      DO 74 I=1,NODES
   74 PRINT 479,I,X(I),Y(I)
      PRINT 500
      DO 75 I=1,NELEM
   75 PRINT 440,I,(NODE(I,J),J=1,NUMN)
      IF(NSDF.GT.0)PRINT 460,NSDF,(IBDF(I),I=1,NSDF)
      IF(NDIRC.EQ.0)GOTO 80
      PRINT 640, NDIRC,(IDIR(I),I=1,NDIRC)
      PRINT 600
      PRINT 480,(VDIR(I),I=1,NDIRC)
   80 IF(ITYPE.LT.0.OR.ITYPE.EQ.2)GOTO 100
C
C     COMPUTE MATERIAL CONSTANTS FOR PLANE ELASTICITY
C
      VIS=C3*C2/C1
      DENOM=1.0-C3*VIS
C
C     PLANE STRESS
C
      C(1,1)=C1*C5/DENOM
      C(1,2)=VIS*C(1,1)
      C(2,2)=C2*C(1,1)/C1
      IF(ITYPE.EQ.0)GOTO 90
C
C     PLANE STRAIN
C
      SO=(1.0-3.0*C3*VIS-C3*VIS*(C3+VIS))
      C(1,1)=C1*C5*DENOM/SO
      C(1,2)=C1*C5*VIS*(1.0+C3)/SO
      C(2,2)=C2*C(1,1)/C1
   90 C(3,3)=C4*C5
      C(1,3)=0.0
      C(2,3)=0.0
      C(2,1)=C(1,2)
      C(3,1)=C(1,3)
      C(3,2)=C(2,3)
C
C     COMPUTE THE HALF BANDWIDTH
C
  100 NHBW=0
      DO 110 N=1,NELEM
      DO 110 I=1,NUMN
      DO 110 J=1,NUMN
      NW=(IABS(NODE(N,I)-NODE(N,J))+1)*NDF
  110 IF(NHBW.LT.NW)NHBW=NW
      PRINT 590,NHBW
      IF(ITEM.NE.1)GOTO 125
      TIME=0.0
      PRINT 420,THETA,DT,TO
      A0=(1.0-THETA)*DT
      A1=THETA*DT
  120 TIME=TIME+DT
      IF(TIME.GT.TO)GOTO 999
C
C     INITIALIZE GLOBAL STIFFNESS MATRIX AND FORCE VECTOR
C
  125 DO 130 I=1,NEQ
      BF(I)=0.0
      DO 130 J=1,NHBW
  130 A(I,J)=0.0
C
C     CALCULATE ELEMENT MATRICES
C
  140 DO 300 N=1,NELEM
      DO 150 I=1,NUMN
      NI=NODE(N,I)
      ELXY(I,1)=X(NI)
      ELXY(I,2)=Y(NI)
      IF(ITEM.EQ.0)GOTO 150
      L=NI*NDF-1
      K=I*NDF-1
      IF(NDF.EQ.1)K=I
      IF(NDF.EQ.1)L=NI
      W0(K)=BP(L)
      W0(K+1)=BP(L+1)
  150 CONTINUE
      IF(IELEM.GT.0)CALL STIFFQ(NUMN,NDOF,IELEM,ITYPE,ITEM,C1,C2,C5)
      IF(IELEM.EQ.0)CALL STIFFT(NUMN,NDOF,ITYPE,ITEM,C1,C2,C5)
      IF(N.NE.NPRNT)GOTO 170
      PRINT 680
      DO 160 I=1,NDOF
  160 PRINT 670,(ASTIF(I,J),J=1,NDOF)
  170 IF(ICONV.EQ.0)GOTO 200
C
C     ADDITION OF CONVECTIVE B.C. TERMS TO ELEMENT MATRIX
C
      DO 180 M=1,NCONV
      IF(ICV(M).NE.N)GOTO 180
      M1=INOD(M,1)
      M2=INOD(M,2)
      N1=NODE(N,M1)
      N2=NODE(N,M2)
      DL=DSQRT((X(N2)-X(N1))**2+(Y(N2)-Y(N1))**2)
      BL=C3*DL
      ASTIF(M1,M1)=ASTIF(M1,M1)+BL/3.0
      ASTIF(M2,M2)=ASTIF(M2,M2)+BL/3.0
      ASTIF(M1,M2)=ASTIF(M1,M2)+BL/6.0
      ASTIF(M2,M1)=ASTIF(M1,M2)
      F(M1)=F(M1)+0.5*BL*C4
      F(M2)=F(M2)+0.5*BL*C4
  180 CONTINUE
C
C     ASSEMBLE ELEMENT MATRICES TO OBTAIN GLOBAL MATRIX
C
  200 DO 280 I=1,NUMN
      NR=(NODE(N,I)-1)*NDF
      DO 280 II=1,NDF
      NR=NR+1
      L=(I-1)*NDF+II
      BF(NR)=BF(NR)+F(L)
      DO 260 J=1,NUMN
      NCL=(NODE(N,J)-1)*NDF
      DO 260 JJ=1,NDF
      M=(J-1)*NDF+JJ
      NC=NCL+JJ+1-NR
      IF(NC)260,260,250
  250 A(NR,NC)=A(NR,NC)+ASTIF(L,M)
  260 CONTINUE
  280 CONTINUE
  300 CONTINUE
C
C     IMPLEMENT BOUNDARY CONTITIONS ON PRIMARY AND SECONDARY VARIABLES
C
      IRES=0
      IF(NDIRC.EQ.0)GOTO 320
      DO 310 I=1,NDIRC
      II=IDIR(I)
  310 BF(II)=VDIR(I)+BF(II)
  320 IF(NPRNT.LE.1)GOTO 340
      PRINT 700
      DO 330 I=1,NEQ
  330 PRINT 480,(A(I,J),J=1,NHBW)
      PRINT 710
      PRINT 480,(BF(I),I=1,NEQ)
  340 IF(NSDF.EQ.0)GOTO 350
      CALL BNDCON(NRMAX,NCMAX,NEQ,NHBW,A,BF,NSDF,IBDF,VBDF)
C
C     SOLVE THE SYSTEM OF EQUATIONS FOR THE PRIMARY DOF
C
  350 CALL SOLVE(NRMAX,NCMAX,NEQ,NHBW,A,BF,IRES)
      IF(ITEM.EQ.0)GOTO 370
      DO 360 I=1,NEQ
  360 BP(I)=BF(I)
      PRINT 430,TIME
  370 PRINT 540
      IF(ITYPE.GE.0)PRINT 485,(I,BF(I+I-1),BF(I+I),I=1,NODES)
      IF(ITYPE.LT.0)PRINT 480,(BF(I),I=1,NODES)
      PRINT 690
      IF(ITYPE.GE.0)PRINT 620
      IF(ITYPE.LT.0)PRINT 410
      DO 390 N=1,NELEM
      DO 380 I=1,NUMN
      NI=NODE(N,I)
      L=NI*NDF-1
      IF(NDF.EQ.1)L=NI
      W(1,I)=BF(L)
      IF(NDF.EQ.2)W(2,I)=BF(L+1)
      ELXY(I,1)=X(NI)
  380 ELXY(I,2)=Y(NI)
  390 CALL STRESS(N,NUMN,ELXY,C,W,C1,C2,ITYPE,IELEM)
      IF(ITEM.EQ.1)GOTO 120
  999 CONTINUE
      CALL PRINTF(BF,NODES,ITYPE)
      STOP
C
C     FORMATS
C
  400 FORMAT(18A4)
  410 FORMAT(7X,'ELE.NO.',2X,'X-COMPONENT',6X,'Y-COMPONENT',7X,'MAGNITUD
     *E',9X,'ANGLE',/)
  420 FORMAT(/,3X,'THETA=',1PE10.3,2X,'TIME STEP=',1PE10.3,2X,'MAX. TIME
     *=',1PE10.3)
  430 FORMAT(/,3X,'TIME =',F10.3,/)
  440 FORMAT(8X,18I4)
  450 FORMAT(10X,'ACTUAL NUMBER OF ELEMENTS IN THE GRID.....=',I3,/,
     *10X,'NUMBER OF NODES IN THE GRID...............=',I3,/,10X,'TOTAL
     *NUMBER OF EQUATIONS IN THE MODEL....=',I3,/)
  460 FORMAT(/,3X,'NO. OF SPECIFIED DEGREES OF FREEDOM =',I3,/,
     *3X,'ARRAY OF THE SPECIFIED DEGREES OF FREEDOM:',/,8X,16I4,/,
     *8X,16I4,/,8X,16I4,/)
  470 FORMAT(/,10X,'CONVECTIVE BOUNDARY DATA: NCONV........=',I3,/,10X,
     *'ARRAY ICV:',10I5)
  479 FORMAT(6X,I3,2X,2(1PE10.3,1X))
  480 FORMAT(2(10X,1PE10.3,1X))
  485 FORMAT(2(I6,1X,2(1PE10.3,1X),5X))
  500 FORMAT(/,3X,'CONNECTIVITY MATRIX',/7X,'ELE.NO.',4X,'NODE(I,J)',/)
  510 FORMAT(/,10X,'PARAMETERS, C1, C2, C3, C4, AND C5:',/,15X,'C1=',
     *1PE10.3,/,15X,'C2=',1PE10.3,/,15X,'C3=',1PE10.3,/,15X,'C4=',1PE10.
     *3,/,15X,'C5=',1PE10.3)
  520 FORMAT(16I5)
  530 FORMAT(10X,'MODULUS OF ELASTICITY, E1.................=',1PE10.3,/
     *,10X,'MODULUS OF ELASTICITY, E2.................=',1PE10.3,/,10X,
     *'POISSONS RATIO, VIS.......................=',1PE10.3,/,10X,
     *'SHEAR MODULUS, G12........................=',1PE10.3,/,10X,
     *'PLATE THICKNESS, T........................=',1PE10.3)
  540 FORMAT(/,3X,'SOLUTION VECTOR:',/)
  550 FORMAT(/,3X,'A PLANE ELASTICITY OR FLUID FLOW PROBLEM',/)
  560 FORMAT(3X,'COORDINATES OF THE GLOBAL NODES:',/,6X,'NODE',4X,'X',10
     *X,'Y',/)
  570 FORMAT(3X,'HEAT TRANSFER TYPE PROBLEM',/)
  590 FORMAT(/,3X,'HALF BAND WIDTH OF GLOBAL STIFFNESS MATRIX =',I3)
  600 FORMAT(/,3X,'VALUES OF THE SPECIFIED FORCES:',/)
  620 FORMAT(/,6X,'ELE.NO.',3X,'STRESS, SXX',6X,'STRESS, SYY',6X,'STRESS
     *, SXY',8X,'PRESSURE',/)
  640 FORMAT(/,3X,'NO. OF SPECIFIED FORCES =',I3,/,3X,'SPECIFIED FORCE D
     *EGREES OF FREEDOM :',/,8X,16I4,/)
  650 FORMAT(10X,'VISCOSITY.................................=',1PE10.3,/
     *,10X,'PENALTY PARAMETER.........................=',1PE10.3)
  660 FORMAT(/,10X,'ELEMENT TYPE..............................=',I2,/,
     *10X,'PROBLEM TYPE..............................=',I2,/,10X,
     *'CONVECTION (0:NO, 1:YES)..................=',I2)
  670 FORMAT(3X,7(1PE10.3,1X))
  680 FORMAT(/,3X,'ELEMENT MATRICES:',/)
  690 FORMAT(/,3X,'ANGLE = ARC TANGENT OF Y-COMPONENT DIVIDED BY X-COMPO
     *NENT',/)
  700 FORMAT(3X,'GLOBAL STIFFNESS MATRIX:',/)
  710 FORMAT(/,3X,'GLOBAL FORCE VECTOR:',/)
      END
C -----------------------------------------------------------------
      SUBROUTINE STIFFT(NUMN,NDOF,ITYPE,ITEM,AK1,AK2,Q)
C
C     THE SUBROUTINE COMPUTES THE ELEMENT COEFFICIENT MATRICES FOR
C     HEAT TRANSFER TYPE AND PLANE ELASTICITY PROBLEMS WHEN THE LINEAR
C     TRIANGULAR ELEMENT IS USED. CONSTANT SOURCE TERMS ARE ASSUMED
C     FOR PLANE ELASTICITY PROBLEMS IN COMPUTING THE 'FORCE' VECTOR.
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/STF/ASTIF(18,18),ELXY(9,2),C(3,3),F(18),W0(18),A0,A1
      DIMENSION P(3,6),BT(6,3),STR(3,6),ALPHA(3),BETA(3),GAMA(3),X(3),
     *Y(3)
C
C     DEFINE THE COEFFICIENTS OF THE INTERPOLATION FUNCTIONS
C
      DO 10 I=1,NUMN
      X(I)=ELXY(I,1)
      Y(I)=ELXY(I,2)
      DO 10 J=1,NDOF
   10 P(I,J)=0.0
      DO 20 I=1,NUMN
      J=I+1
      IF(J.GT.NUMN)J=J-NUMN
      K=J+1
      IF(K.GT.NUMN)K=K-NUMN
      ALPHA(I)=X(J)*Y(K)-X(K)*Y(J)
      BETA(I)=Y(J)-Y(K)
   20 GAMA(I)=X(K)-X(J)
      DET=X(1)*(Y(2)-Y(3))+X(2)*(Y(3)-Y(1))+X(3)*(Y(1)-Y(2))
      IF(ITYPE)100,40,40
C
C     COMPUTE ELEMENT STIFFNESS MATRIX FOR PLANE ELASTICITY
C                  K=CONST*BT*C*B
C                  F(I)=0.0
C
   40 DO 60 I=1,NUMN
      J=2*I-1
      P(1,J)=BETA(I)/DET
      P(3,J)=GAMA(I)/DET
      P(2,J+1)=GAMA(I)/DET
   60 P(3,J+1)=BETA(I)/DET
      DO 70 I=1,3
      DO 70 J=1,NDOF
      BT(J,I)=0.5*DET*P(I,J)
      STR(I,J)=0.0
      DO 70 K=1,3
   70 STR(I,J)=STR(I,J)+C(I,K)*P(K,J)
      DO 80 I=1,NDOF
      F(I)=0.0
      DO 80 J=1,NDOF
      ASTIF(I,J)=0.0
      DO 80 K=1,3
   80 ASTIF(I,J)=ASTIF(I,J)+BT(I,K)*STR(K,J)
      RETURN
C
C     COMPUTE THE COEFFICIENT MATRIX FOR HEAT TRANSFER TYPE PROBLEMS
C
  100 XBAR=(X(1)+X(2)+X(3))/3.0
      YBAR=(Y(1)+Y(2)+Y(3))/3.0
      A00=0.5*DET
      A01=A00*YBAR
      A10=A00*XBAR
      A11=A00*(X(1)*Y(1)+X(2)*Y(2)+X(3)*Y(3)+9.0*XBAR*YBAR)/12.0
      A20=A00*(X(1)*X(1)+X(2)*X(2)+X(3)*X(3)+9.0*XBAR*XBAR)/12.0
      A02=A00*(Y(1)*Y(1)+Y(2)*Y(2)+Y(3)*Y(3)+9.0*YBAR*YBAR)/12.0
C
C     ONLY CONSTANT SOURCE TERM IS ASSUMED
C
      DO 120 I=1,NUMN
      F(I)=0.5*Q*(ALPHA(I)+BETA(I)*XBAR+GAMA(I)*YBAR)
      DO 120 J=1,NUMN
  120 ASTIF(I,J)=(AK1*BETA(I)*BETA(J)+AK2*GAMA(I)*GAMA(J))/DET/2.0
      IF(ITEM.EQ.0)RETURN
C
C     DEFINE THE MASS MATRIX FOR TRANSIENT PROBLEMS
C
      DO 140 I=1,NUMN
      DO 140 J=1,NUMN
  140 P(I,J)=(ALPHA(I)*ALPHA(J)*A00+(ALPHA(I)*BETA(J)+ALPHA(J)*BETA(I))*
     *A10+(BETA(I)*GAMA(J)+GAMA(I)*BETA(J))*A11+(ALPHA(I)*GAMA(J)+GAMA(I
     *)*ALPHA(J))*A01+BETA(I)*BETA(J)*A20+GAMA(I)*GAMA(J)*A02)/(DET*DET)
      DO 160 I=1,NUMN
      SUM=0.0
      DO 150 J=1,NUMN
      SUM=SUM+(P(I,J)-A0*ASTIF(I,J))*W0(J)
  150 ASTIF(I,J)=P(I,J)+A1*ASTIF(I,J)
  160 F(I)=(A0+A1)*F(I)+SUM
      RETURN
      END
C -----------------------------------------------------------------
      SUBROUTINE STIFFQ(NUMN,NDOF,IELEM,ITYPE,ITEM,AK1,AK2,Q)
C
C     STIFFNESS MATRIX FOR ISOPARAMETRIC QUADRILATERAL ELEMENTS
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8 NS
      COMMON/STF/ASTIF(18,18),ELXY(9,2),C(3,3),F(18),W0(18),A0,A1
      DIMENSION NS(9),GDNS(2,9),GAUSS(4,4),WT(4,4),SS(18,18),S(9,9),
     *SXY(9,9),SX(9,9),SY(9,9)
C
      DATA GAUSS/4*0.0D0,-.57735027D0,.57735027D0,2*0.0D0,-.77459667D0,
     *0.0D0,.77459667D0,0.0D0,-.86113631D0,-.33998104D0,.33998104D0,
     *.86113631D0/
C
      DATA WT/2.0D0,3*0.0D0,2*1.0D0,2*0.0D0,.55555555D0,.88888888D0,
     *.55555555D0,0.0D0,.34785485D0,2*.65214515D0,.34785485D0/
C
      NDF=NDOF/NUMN
      NGAUS=IELEM+1
C
C     INITIALIZE THE ARRAYS
C
      DO 20 I=1,NUMN
      DO 20 J=1,NUMN
      S(I,J)=0.0
      SX(I,J)=0.0
      SY(I,J)=0.0
   20 SXY(I,J)=0.0
      DO 30 I=1,NDOF
      F(I)=0.0
      DO 30 J=1,NDOF
   30 SS(I,J)=0.0
C
      DO 100 NI=1,NGAUS
      DO 100 NJ=1,NGAUS
      XI=GAUSS(NI,NGAUS)
      ETA=GAUSS(NJ,NGAUS)
      CALL SHAPE(NUMN,XI,ETA,NS,GDNS,DET,ELXY)
      CONST=DET*WT(NI,NGAUS)*WT(NJ,NGAUS)
      DO 80 I=1,NUMN
      IF(ITYPE.GE.0)GOTO 60
C
C     CONSTANT SOURCE TERM IS ASSUMED ONLY FOR HEAT TRANSFER
C
      F(I)=F(I)+Q*NS(I)*CONST
   60 DO 80 J=1,NUMN
      S(I,J)=S(I,J)+CONST*NS(I)*NS(J)
      SX(I,J)=SX(I,J)+CONST*GDNS(1,I)*GDNS(1,J)
      SY(I,J)=SY(I,J)+CONST*GDNS(2,I)*GDNS(2,J)
      SXY(I,J)=SXY(I,J)+CONST*GDNS(1,I)*GDNS(2,J)
   80 CONTINUE
  100 CONTINUE
C
C     ELEMENT CALCULATIONS FOR HEAT TRANSFER
C
      IF(ITYPE.GE.0)GOTO 140
      DO 110 I=1,NUMN
      DO 110 J=1,NUMN
  110 ASTIF(I,J)=AK1*SX(I,J)+AK2*SY(I,J)
      IF(ITEM.EQ.0)RETURN
      DO 130 I=1,NUMN
      SUM=0.0
      DO 120 J=1,NUMN
      SUM=SUM+(S(I,J)-A0*ASTIF(I,J))*W0(J)
  120 ASTIF(I,J)=S(I,J)+A1*ASTIF(I,J)
  130 F(I)=(A0+A1)*F(I)+SUM
      RETURN
  140 IF(ITYPE.EQ.2)GOTO 230
C
C     ELEMENT CALCULATIONS FOR PLANE ELASTICITY
C     NO BODY FORCES
C
      II=1
      DO 200 I=1,NUMN
      JJ=1
      DO 150 J=1,NUMN
      ASTIF(II,JJ)=C(1,1)*SX(I,J)+C(3,3)*SY(I,J)
      ASTIF(II+1,JJ+1)=C(3,3)*SX(I,J)+C(2,2)*SY(I,J)
      ASTIF(II,JJ+1)=C(1,2)*SXY(I,J)+C(3,3)*SXY(J,I)
      ASTIF(II+1,JJ)=C(1,2)*SXY(J,I)+C(3,3)*SXY(I,J)
  150 JJ=NDF*J+1
  200 II=NDF*I+1
      RETURN
C
C     ELEMENT CALCULATIONS FOR INCOMPRESSIBLE FLUID FLOW
C
  230 II=1
      DO 250 I=1,NUMN
      JJ=1
      DO 240 J=1,NUMN
      ASTIF(II,JJ)=AK1*(2.0*SX(I,J)+SY(I,J))
      ASTIF(II+1,JJ)=AK1*SXY(I,J)
      ASTIF(II,JJ+1)=AK1*SXY(J,I)
      ASTIF(II+1,JJ+1)=AK1*(SX(I,J)+2.0*SY(I,J))
      IF(ITEM.EQ.0)GOTO 240
      SS(II,JJ)=S(I,J)
      SS(II+1,JJ+1)=S(I,J)
  240 JJ=NDF*J+1
  250 II=NDF*I+1
C
C     REDUCED INTEGRATION ON PENALTY TERMS
C
      DO 300 NI=1,IELEM
      DO 300 NJ=1,IELEM
      XI=GAUSS(NI,IELEM)
      ETA=GAUSS(NJ,IELEM)
      CALL SHAPE(NUMN,XI,ETA,NS,GDNS,DET,ELXY)
      CONST=DET*WT(NI,IELEM)*WT(NJ,IELEM)
      II=1
      DO 280 I=1,NUMN
      JJ=1
      DO 260 J=1,NUMN
      ASTIF(II,JJ)=ASTIF(II,JJ)+AK2*GDNS(1,I)*GDNS(1,J)*CONST
      ASTIF(II+1,JJ)=ASTIF(II+1,JJ)+AK2*GDNS(2,I)*GDNS(1,J)*CONST
      ASTIF(II,JJ+1)=ASTIF(II,JJ+1)+AK2*GDNS(1,I)*GDNS(2,J)*CONST
      ASTIF(II+1,JJ+1)=ASTIF(II+1,JJ+1)+AK2*GDNS(2,I)*GDNS(2,J)*CONST
  260 JJ=NDF*J+1
  280 II=NDF*I+1
  300 CONTINUE
      IF(ITEM.EQ.0)RETURN
      DO 320 I=1,NDOF
      DO 320 J=1,NDOF
      F(I)=F(I)+(SS(I,J)-A0*ASTIF(I,J))*W0(J)
  320 ASTIF(I,J)=SS(I,J)+A1*ASTIF(I,J)
      RETURN
      END
C -----------------------------------------------------------------
      SUBROUTINE SHAPE(NUMN,XI,ETA,NS,GDNS,DET,ELXY)
C
C     THIS SUBROUTINE EVALUATES THE INTERPOLATION FUNCTION (NS(I)) AND
C     ITS DERIVATIVES WITH RESPECT TO NATURAL COORDINATES (DNS(I,J)),
C     AND THE DERIVATIVES OF NS(I) WITH RESPECT TO GLOBAL COORDINATES
C     FOR FOUR, EIGHT, AND NINE NODE RECTANGULAR ISOPARAMETRIC ELEMENTS
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 NS,JAC,JACIV
      DIMENSION ELXY(9,2),XNODE(9,2),NP(9),DNS(2,9),JAC(2,2),JACIV(2,2),
     *          NS(9),GDNS(2,9)
      DATA XNODE/-1.0D0,2*1.0D0,-1.0D0,0.0D0,1.0D0,0.0D0,-1.0D0,0.0D0,
     *           2*-1.0D0,2*1.0D0,-1.0D0,0.0D0,1.0D0,2*0.0D0/
      DATA NP/1,2,3,4,5,7,6,8,9/
C
      FNC(A,B)=A*B
      IF(NUMN-8)60,10,80
C
C     QUADRATIC INTERPOLATION FUNCTIONS (FOR THE EIGHT-NODE ELEMENT)
C
   10 DO 40 I=1,NUMN
      NI=NP(I)
      XP=XNODE(NI,1)
      YP=XNODE(NI,2)
      XI0=1.0+XI*XP
      ETA0=1.0+ETA*YP
      XI1=1.0-XI*XI
      ETA1=1.0-ETA*ETA
      IF(I.GT.4)GOTO 20
      NS(NI)=0.25*FNC(XI0,ETA0)*(XI*XP+ETA*YP-1.0)
      DNS(1,NI)=0.25*FNC(ETA0,XP)*(2.0*XI*XP+ETA*YP)
      DNS(2,NI)=0.25*FNC(XI0,YP)*(2.0*ETA*YP+XI*XP)
      GOTO 40
   20 IF(I.GT.6)GOTO 30
      NS(NI)=0.5*FNC(XI1,ETA0)
      DNS(1,NI)=-FNC(XI,ETA0)
      DNS(2,NI)=0.5*FNC(YP,XI1)
      GOTO 40
   30 NS(NI)=0.5*FNC(ETA1,XI0)
      DNS(1,NI)=0.5*FNC(XP,ETA1)
      DNS(2,NI)=-FNC(ETA,XI0)
   40 CONTINUE
      GOTO 130
C
C     LINEAR INTERPOLATION FUNCTIONS (FOR FOUR-NODE ELEMENT)
C
   60 DO 70 I=1,NUMN
      XP=XNODE(I,1)
      YP=XNODE(I,2)
      XI0=1.0+XI*XP
      ETA0=1.0+ETA*YP
      NS(I)=0.25*FNC(XI0,ETA0)
      DNS(1,I)=0.25*FNC(XP,ETA0)
   70 DNS(2,I)=0.25*FNC(YP,XI0)
      GOTO 130
C
C     QUADRATIC INTERPOLATION FUNCTIONS (FOR THE NINE-NODE ELEMENT)
C
   80 DO 120 I=1,NUMN
      NI=NP(I)
      XP=XNODE(NI,1)
      YP=XNODE(NI,2)
      XI0=1.0+XI*XP
      ETA0=1.0+ETA*YP
      XI1=1.0-XI*XI
      ETA1=1.0-ETA*ETA
      XI2=XP*XI
      ETA2=YP*ETA
      IF(I.GT.4)GOTO 90
      NS(NI)=0.25*FNC(XI0,ETA0)*XI2*ETA2
      DNS(1,NI)=0.25*XP*FNC(ETA2,ETA0)*(1.0+2.0*XI2)
      DNS(2,NI)=0.25*YP*FNC(XI2,XI0)*(1.0+2.0*ETA2)
      GOTO 120
   90 IF(I.GT.6)GOTO 100
      NS(NI)=0.5*FNC(XI1,ETA0)*ETA2
      DNS(1,NI)=-XI*FNC(ETA2,ETA0)
      DNS(2,NI)=0.5*FNC(XI1,YP)*(1.0+2.0*ETA2)
      GOTO 120
  100 IF(I.GT.8)GOTO 110
      NS(NI)=0.5*FNC(ETA1,XI0)*XI2
      DNS(2,NI)=-ETA*FNC(XI2,XI0)
      DNS(1,NI)=0.5*FNC(ETA1,XP)*(1.0+2.0*XI2)
      GOTO 120
  110 NS(NI)=FNC(XI1,ETA1)
      DNS(1,NI)=-2.0*XI*ETA1
      DNS(2,NI)=-2.0*ETA*XI1
  120 CONTINUE
  130 DO 140 I=1,2
      DO 140 J=1,2
      JAC(I,J)=0.0
      DO 140 K=1,NUMN
  140 JAC(I,J)=JAC(I,J)+DNS(I,K)*ELXY(K,J)
      DET=JAC(1,1)*JAC(2,2)-JAC(1,2)*JAC(2,1)
      IF(DET.EQ.0)THEN
        PRINT 101,DET,JAC(1,1),JAC(2,2),JAC(1,2),JAC(2,1)
  101 FORMAT(10X,'DET=',1PE10.3,2X,'J11=',1PE10.3,2X,'J22=',1PE10.3,2X,
     *'J12=',1PE10.3,2X,'J21=',1PE10.3)
       STOP
       ENDIF
      JACIV(1,1)=JAC(2,2)/DET
      JACIV(2,2)=JAC(1,1)/DET
      JACIV(1,2)=-JAC(1,2)/DET
      JACIV(2,1)=-JAC(2,1)/DET
      DO 150 I=1,2
      DO 150 J=1,NUMN
      GDNS(I,J)=0.0
      DO 150 K=1,2
  150 GDNS(I,J)=GDNS(I,J)+JACIV(I,K)*DNS(K,J)
      RETURN
      END
C -----------------------------------------------------------------
      SUBROUTINE STRESS(N,NUMN,ELXY,C,W,AK1,AK2,ITYPE,IELEM)
C
C     SUBROUTINE TO COMPUTE THE GRADIENT OF SOLUTION AND STRESSES FOR
C     TRIANGULAR AND QUADRILATERAL ELEMENTS
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8 NS
      DIMENSION NS(9),GDNS(2,9),C(3,3),X(3),Y(3),GAMA(3),BETA(3),
     *          ELXY(9,2),W(2,9)
      CONST=180.0/3.14159265
      UX=0.0
      UY=0.0
      VX=0.0
      VY=0.0
      IF(IELEM.GT.0)GOTO 100
C
C     STRESS/GRADIENT COMPUTATION FOR TRIANGULAR ELEMENTS
C
      DO 10 I=1,NUMN
      X(I)=ELXY(I,1)
   10 Y(I)=ELXY(I,2)
      DO 20 I=1,NUMN
      J=I+1
      IF(J.GT.NUMN)J=J-NUMN
      K=J+1
      IF(K.GT.NUMN)K=K-NUMN
      BETA(I)=Y(J)-Y(K)
   20 GAMA(I)=X(K)-X(J)
      DET=X(1)*(Y(2)-Y(3))+X(2)*(Y(3)-Y(1))+X(3)*(Y(1)-Y(2))
      IF(ITYPE)30,70,70
C
   30 DO 40 I=1,NUMN
      UX=UX+W(1,I)*BETA(I)*AK1/DET
   40 UY=UY+W(1,I)*GAMA(I)*AK2/DET
      VALU=DSQRT(UX**2+UY**2)
      IF(UX.EQ.0.0)GOTO 50
      ANGLE=DATAN2(UY,UX)*CONST
      GOTO 60
   50 IF(UY.LT.0.0)ANGLE=-90.0
      IF(UY.GT.0.0)ANGLE=90.0
   60 PRINT 4,N,UX,UY,VALU,ANGLE
      RETURN
C
C     CALCULATION OF STRESSES FOR PLANE ELASTICITY
C
   70 DO 80 I=1,NUMN
      UX=UX+BETA(I)*W(1,I)/DET
      VY=VY+GAMA(I)*W(2,I)/DET
      UY=UY+GAMA(I)*W(1,I)/DET
   80 VX=VX+BETA(I)*W(2,I)/DET
      SX=C(1,1)*UX+C(1,2)*UY
      SY=C(1,2)*UX+C(2,2)*UY
      SXY=C(3,3)*(UY+VX)
      PRINT 4,N,SX,SY,SXY
      RETURN
C
C     CALCULATION OF STRESSES/GRADIENT OF SOLUTION AT THE CENTER OF
C     THE QUADRILATERAL ELEMENTS
C
  100 XI=0.0
      ETA=0.0
      CALL SHAPE(NUMN,XI,ETA,NS,GDNS,DET,ELXY)
      DO 110 I=1,NUMN
      UX=UX+W(1,I)*GDNS(1,I)
      UY=UY+W(1,I)*GDNS(2,I)
      VX=VX+W(2,I)*GDNS(1,I)
  110 VY=VY+W(2,I)*GDNS(2,I)
      IF(ITYPE.LT.0)GOTO 120
      IF(ITYPE.EQ.2)GOTO 150
C
C     STRESS COMPUTATION FOR PLANE ELASTICITY
C
      SX=C(1,1)*UX+C(1,2)*VY
      SY=C(1,2)*UX+C(2,2)*VY
      SXY=C(3,3)*(UY+VX)
      PRINT 4,N,SX,SY,SXY
      RETURN
C
C     COMPUTATION OF THE GRADIENT OF THE SOLUTION IN HEAT-CONDUCTION
C     TYPE PROBLEMS (ONE-DEGREE-OF-FREEDOM)
C
  120 SX=AK1*UX
      SY=AK2*UY
      VALU=DSQRT(SX**2+SY**2)
      IF(SX.EQ.0.0)GOTO 130
      ANGLE=DATAN2(SY,SX)*CONST
      GOTO 140
  130 IF(SY.GT.0.0)ANGLE=90.0
      IF(SY.LT.0.0)ANGLE=-90.0
  140 PRINT 4,N,SX,SY,VALU,ANGLE
      RETURN
C
C     STRESS COMPUTATION FOR STOKES FLOW (PENALTY METHOD)
C
  150 P=-AK2*(UX+VY)
      SX=2.0*AK1*UX-P
      SY=2.0*AK1*VY-P
      SXY=AK1*(UY+VX)
      P=-AK2*(UX+VY)
      PRINT 4,N,SX,SY,SXY,P
    4 FORMAT(5X,I5,4(4X,1PE13.6))
      RETURN
      END
C -----------------------------------------------------------------
      SUBROUTINE GRID(IELEM,NX,NY,NUMN,NODES,NELEM)
C
C     THIS SUBROUTINE GENERATES ARRAY NODE(I,J), COORDINATES X(I),Y(I),
C     AND GRID INFORMATION (NODES,NELEM,NUMN) FOR RECTANGULAR DOMAINS.
C     DOMAIN IS DIVIDED INTO LINEAR TRIANGULAR ELEMENTS OR QUADRILA-
C     TERAL ELEMENTS (NX BY NY)
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/MSH/NODE(501,9),X(501),Y(501),DX(15),DY(15)
      IF(IELEM.GT.0)GOTO 100
C
C     MESH OF TRIANGULAR ELEMENTS
C
      NELEM=2*NX*NY
      NX1=NX+1
      NY1=NY+1
      NXX1=2*NX
      NYY1=2*NY
      NODES=NX1*NY1
      NODE(1,1)=1
      NODE(1,2)=2
      NODE(1,3)=NX1+2
      NODE(2,1)=1
      NODE(2,2)=NX1+2
      NODE(2,3)=NX1+1
      K=3
      DO 60 IY=1,NY
      L=IY*NXX1
      M=(IY-1)*NXX1
      IF(NX.EQ.1)GOTO 40
      DO 30 N=K,L,2
      DO 20 I=1,NUMN
      NODE(N,I)=NODE(N-2,I)+1
   20 NODE(N+1,I)=NODE(N-1,I)+1
   30 CONTINUE
   40 IF(NY.EQ.1)GOTO 60
      DO 50 I=1,NUMN
      NODE(L+1,I)=NODE(M+1,I)+NX1
   50 NODE(L+2,I)=NODE(M+2,I)+NX1
   60 K=L+3
   70 L=0
      YC=0.0
      DO 90 J=1,NY1
      XC=0.0
      DO 80 I=1,NX1
      L=L+1
      X(L)=XC
      Y(L)=YC
   80 XC=XC+DX(I)
   90 YC=YC+DY(J)
      RETURN
C
C     MESH OF QUADRILATERAL ELEMENTS WITH FOUR, EIGHT, OR NINE NODES
C
  100 NEX1=NX+1
      NEY1=NY+1
      NXX=IELEM*NX
      NYY=IELEM*NY
      NXX1=NXX+1
      NYY1=NYY+1
      NELEM=NX*NY
      NODES=NXX1*NYY1-(IELEM-1)*NX*NY
      IF(NUMN.EQ.9)NODES=NXX1*NYY1
      K0=0
      IF(NUMN.EQ.9)K0=1
C
C     GENERATE THE ARRAY NODE(I,J)
C
      NODE(1,1)=1
      NODE(1,2)=IELEM+1
      NODE(1,3)=NXX1+(IELEM-1)*NEX1+IELEM+1
      IF(NUMN.EQ.9)NODE(1,3)=4*NX+5
      NODE(1,4)=NODE(1,3)-IELEM
      IF(NUMN.EQ.4)GOTO 200
      NODE(1,5)=2
      NODE(1,6)=NXX1+(NUMN-6)
      NODE(1,7)=NODE(1,3)-1
      NODE(1,8)=NXX1+1
      IF(NUMN.EQ.9)NODE(1,9)=NXX1+2
  200 IF(NY.EQ.1)GOTO 230
      M=1
      DO 220 N=2,NY
      L=(N-1)*NX+1
      DO 210 I=1,NUMN
  210 NODE(L,I)=NODE(M,I)+NXX1+(IELEM-1)*NEX1+K0*NX
  220 M=L
  230 IF(NX.EQ.1)GOTO 270
      DO 260 NI=2,NX
      DO 240 I=1,NUMN
      K1=IELEM
      IF(I.EQ.6.OR.I.EQ.8)K1=1+K0
  240 NODE(NI,I)=NODE(NI-1,I)+K1
      M=NI
      DO 260 NJ=2,NY
      L=(NJ-1)*NX+NI
      DO 250 J=1,NUMN
  250 NODE(L,J)=NODE(M,J)+NXX1+(IELEM-1)*NEX1+K0*NX
  260 M=L
C
C     GENERATE THE COORDINATES X(I) AND Y(I)
C
  270 YC=0.0
      IF(NUMN.EQ.9)GOTO 310
      DO 300 NI=1,NEY1
      I=(NXX1+(IELEM-1)*NEX1)*(NI-1)+1
      J=(NI-1)*IELEM+1
      X(I)=0.0
      Y(I)=YC
      DO 280 NJ=1,NXX
      I=I+1
      X(I)=X(I-1)+DX(NJ)
  280 Y(I)=YC
      IF(NI.GT.NY.OR.IELEM.EQ.1)GOTO 300
      J=J+1
      YC=YC+DY(J-1)
      I=I+1
      X(I)=0.0
      Y(I)=YC
      DO 290 II=1,NX
      K=2*II-1
      I=I+1
      X(I)=X(I-1)+DX(K)+DX(K+1)
  290 Y(I)=YC
  300 YC=YC+DY(J)
      RETURN
C
  310 DO 330 NI=1,NYY1
      I=NXX1*(NI-1)
      XC=0.0
      DO 320 NJ=1,NXX1
      I=I+1
      X(I)=XC
      Y(I)=YC
  320 XC=XC+DX(NJ)
  330 YC=YC+DY(NI)
      RETURN
      END
C -----------------------------------------------------------------
      SUBROUTINE BNDCON(NRMAX,NCMAX,NEQ,NHBW,S,SL,NBDY,IBDY,VBDY)
C
C     SUBROUTINE USED TO IMPOSE BOUNDARY CONDITIONS ON BANDED EQUATIONS
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION S(NRMAX,NCMAX),SL(NRMAX)
      DIMENSION IBDY(NBDY),VBDY(NBDY)
      DO 300 NB=1,NBDY
      IE=IBDY(NB)
      SVAL=VBDY(NB)
      IT=NHBW-1
      I=IE-NHBW
      DO 100 II=1,IT
      I=I+1
      IF(I.LT.1)GOTO 100
      J=IE-I+1
      SL(I)=SL(I)-S(I,J)*SVAL
      S(I,J)=0.0
  100 CONTINUE
      S(IE,1)=1.0
      SL(IE)=SVAL
      I=IE
      DO 200 II=2,NHBW
      I=I+1
      IF(I.GT.NEQ)GOTO 200
      SL(I)=SL(I)-S(IE,II)*SVAL
      S(IE,II)=0.0
  200 CONTINUE
  300 CONTINUE
      RETURN
      END
C -----------------------------------------------------------------
      SUBROUTINE SOLVE(NRM,NCM,NEQNS,NBW,BAND,RHS,IRES)
C
C     SOLVES A BANDED SYMMETRIC SYSTEM OF EQUATIONS
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION BAND(NRM,NCM),RHS(NRM)
      MEQNS=NEQNS-1
      IF(IRES.GT.0)GOTO 90
      DO 500 NPIV=1,MEQNS
      NPIVOT=NPIV+1
      LSTSUB=NPIV+NBW-1
      IF(LSTSUB.GT.NEQNS)LSTSUB=NEQNS
      DO 400 NROW=NPIVOT,LSTSUB
C
C     INVERT ROWS AND COLUMNS FOR ROW FACTOR
C
      NCOL=NROW-NPIV+1
      FACTOR=BAND(NPIV,NCOL)/BAND(NPIV,1)
      DO 200 NCOL=NROW,LSTSUB
      ICOL=NCOL-NROW+1
      JCOL=NCOL-NPIV+1
  200 BAND(NROW,ICOL)=BAND(NROW,ICOL)-FACTOR*BAND(NPIV,JCOL)
  400 RHS(NROW)=RHS(NROW)-FACTOR*RHS(NPIV)
  500 CONTINUE
      GOTO 101
   90 DO 100 NPIV=1,MEQNS
      NPIVOT=NPIV+1
      LSTSUB=NPIV+NBW-1
      IF(LSTSUB.GT.NEQNS)LSTSUB=NEQNS
      DO 110 NROW=NPIVOT,LSTSUB
      NCOL=NROW-NPIV+1
      FACTOR=BAND(NPIV,NCOL)/BAND(NPIV,1)
  110 RHS(NROW)=RHS(NROW)-FACTOR*RHS(NPIV)
  100 CONTINUE
C
C     BACK SUBSTITUTION
C
  101 DO 800 IJK=2,NEQNS
      NPIV=NEQNS-IJK+2
      RHS(NPIV)=RHS(NPIV)/BAND(NPIV,1)
      LSTSUB=NPIV-NBW+1
      IF(LSTSUB.LT.1)LSTSUB=1
      NPIVOT=NPIV-1
      DO 700 JKI=LSTSUB,NPIVOT
      NROW=NPIVOT-JKI+LSTSUB
      NCOL=NPIV-NROW+1
      FACTOR=BAND(NROW,NCOL)
  700 RHS(NROW)=RHS(NROW)-FACTOR*RHS(NPIV)
  800 CONTINUE
      RHS(1)=RHS(1)/BAND(1,1)
      RETURN
      END
C -----------------------------------------------------------------
      SUBROUTINE INFILE
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER INFIL*12
      DATA INFIL/'            '/
      WRITE(*,105)
  105 FORMAT(1X,'IF YOU WANT HARDCOPY OUTPUT, PRESS CTL-PRTSC BEFORE ENT
     1ERING INPUT FILE NAME')
      WRITE(*,'(/1X,A\)')' ENTER INPUT FILE NAME (e.g.,INPUTFIL.DAT): '
      READ(*,'(BN,A)')INFIL
      OPEN(5,FILE=INFIL)
      RETURN
      END
C ---------------------------------------------------------------------
      SUBROUTINE PLTOUT
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER OUTPLT*12
C
C     OPEN UNIT 8 FOR OUTPUT FILE
C
      DATA OUTPLT/'            '/
      WRITE(*,'(/1X,A\)')' ENTER NAME FOR PLOT OUTPUT FILE: '
      READ(*,'(BN,A)')OUTPLT
      OPEN(8,FILE=OUTPLT,STATUS='NEW')
      WRITE(8,'(A)')OUTPLT
      WRITE(*,104)
  104 FORMAT(1X,'PLEASE WAIT, SOLUTION IS PROCEEDING')
      RETURN
      END
C ----------------------------------------------------------------------
      SUBROUTINE PRINTF(VALUE,NODES,ITYPE)
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/MSH/NODE(501,9),X(501),Y(501),DX(15),DY(15)
      DIMENSION VALUE(501)
C
      DO 1 I=1,NODES
      IF(ITYPE.GE.0)THEN
      WRITE(8,100)I,X(I),Y(I),VALUE(I+I-1),VALUE(I+I)
      ELSE
      WRITE(8,100)I,X(I),Y(I),VALUE(I)
      ENDIF
    1 CONTINUE
  100 FORMAT(5X,I3,4(1PE12.5,1X))
      RETURN
      END
